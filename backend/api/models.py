from django.db import models


# üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
class Weekday(models.Model):
    number = models.PositiveSmallIntegerField(unique=True)  # 1=–ü–Ω, 2=–í—Ç...
    name = models.CharField(max_length=20)
    short_name = models.CharField(max_length=5)

    def __str__(self):
        return self.name


# üéì –í–∏–¥—ã –∑–∞–Ω—è—Ç–∏–π
class LessonType(models.Model):
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name


# üè¢ –ö–æ—Ä–ø—É—Å–∞
class Building(models.Model):
    code = models.CharField(max_length=5, unique=True)

    def __str__(self):
        return self.code


# üõ† –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
class Equipment(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name


# üè´ –ê—É–¥–∏—Ç–æ—Ä–∏–∏
class Room(models.Model):
    building = models.ForeignKey(Building, on_delete=models.CASCADE)
    number = models.CharField(max_length=10)
    capacity = models.PositiveIntegerField()
    equipment = models.ManyToManyField(Equipment, blank=True)

    def __str__(self):
        return f"{self.building.code}-{self.number}"


# üèõ –ò–Ω—Å—Ç–∏—Ç—É—Ç—ã
class Institute(models.Model):
    name = models.CharField(max_length=100)
    short_name = models.CharField(max_length=20)
    primary_building = models.ForeignKey(Building, on_delete=models.SET_NULL, null=True)

    def __str__(self):
        return self.short_name


# üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
class EducationDirection(models.Model):
    code = models.CharField(max_length=20)
    name = models.CharField(max_length=100)
    short_name = models.CharField(max_length=50)
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.code} - {self.short_name}"


# üßæ –§–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è
class EducationForm(models.Model):
    name = models.CharField(max_length=50)
    short_code = models.CharField(max_length=10)

    def __str__(self):
        return self.name


# üéì –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
class EducationLevel(models.Model):
    name = models.CharField(max_length=50)
    short_code = models.CharField(max_length=10)

    def __str__(self):
        return self.name


# üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
class Discipline(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name


# üïë –ü–∞—Ä–∞ ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
class Pair(models.Model):
    number = models.PositiveSmallIntegerField()
    building = models.ForeignKey(Building, on_delete=models.CASCADE)
    start_time = models.TimeField()
    end_time = models.TimeField()

    class Meta:
        unique_together = ('building', 'number')

    def __str__(self):
        return f"{self.building.code} - –ü–∞—Ä–∞ {self.number}"


# üë• –£—á–µ–±–Ω–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞
class StudentSubGroup(models.Model):
    admission_year = models.PositiveIntegerField()
    direction = models.ForeignKey(EducationDirection, on_delete=models.CASCADE)
    form = models.ForeignKey(EducationForm, on_delete=models.CASCADE)
    level = models.ForeignKey(EducationLevel, on_delete=models.CASCADE)
    group_number = models.PositiveIntegerField()
    subgroup_number = models.PositiveIntegerField()
    student_count = models.PositiveIntegerField()

    def __str__(self):
        return f"{self.admission_year}-{self.direction.short_name}-{self.group_number}.{self.subgroup_number}"


# üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
class Teacher(models.Model):
    full_name = models.CharField(max_length=100)

    def __str__(self):
        return self.full_name


# üìò –¢–∏–ø –∫–æ–Ω—Ç—Ä–æ–ª—è
class ControlType(models.Model):
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name


# üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
class Curriculum(models.Model):
    group = models.ForeignKey(StudentSubGroup, on_delete=models.CASCADE)
    discipline = models.ForeignKey(Discipline, on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    lesson_type = models.ForeignKey(LessonType, on_delete=models.CASCADE)
    hours = models.PositiveIntegerField()
    control_type = models.ForeignKey(ControlType, on_delete=models.SET_NULL, null=True)

    def __str__(self):
        return f"{self.group} - {self.discipline}"


# üßæ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
class LessonRequirement(models.Model):
    discipline = models.ForeignKey(Discipline, on_delete=models.CASCADE)
    lesson_type = models.ForeignKey(LessonType, on_delete=models.CASCADE)
    required_equipment = models.ManyToManyField(Equipment)

    def __str__(self):
        return f"{self.discipline} ({self.lesson_type})"


# üìç –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ
class Lesson(models.Model):
    curriculum = models.ForeignKey(Curriculum, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE)
    groups = models.ManyToManyField(StudentSubGroup)
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ‚Äî —á–µ—Ä–µ–∑ TimeSlot

    def __str__(self):
        return f"{self.curriculum} –≤ {self.room}"


# üïì –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
class TimeSlot(models.Model):
    weekday = models.ForeignKey(Weekday, on_delete=models.CASCADE)
    is_even_week = models.BooleanField()
    pair = models.ForeignKey(Pair, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('weekday', 'is_even_week', 'pair')

    def __str__(self):
        return f"{self.weekday.short_name} {'–ß–µ—Ç' if self.is_even_week else '–ù–µ—á'} - {self.pair}"


# üìÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
class ScheduledLesson(models.Model):
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    time_slot = models.ForeignKey(TimeSlot, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('lesson', 'time_slot')

    def __str__(self):
        return f"{self.lesson} @ {self.time_slot}"


# üïê –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
class TeacherTimePreference(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    excluded_slot = models.ForeignKey(TimeSlot, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('teacher', 'excluded_slot')


# üè´ –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º
class TeacherRoomPreference(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    discipline = models.ForeignKey(Discipline, on_delete=models.CASCADE)
    lesson_type = models.ForeignKey(LessonType, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('teacher', 'discipline', 'lesson_type', 'room')

class Constraint(models.Model):
    name = models.CharField(max_length=100, unique=True)
    weight = models.PositiveSmallIntegerField(default=5)
    method_name = models.CharField(max_length=100)

    def __str__(self):
        return f"{self.name} (weight={self.weight})"

